<?php

namespace App\Http\Controllers\Admin;

use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use App\Models\Communities;
use App\Admins;
use App\Models\States;
use App\Models\Legends;
use App\Models\LegendGroups;
use Illuminate\Support\Facades\Validator;
use App\Models\Homes;
use App\Models\Estimates;
use App\Models\ColorSchemes;
use App\Models\HomeFeatures;
use App\Models\Plots;
use App\Models\Lots;
use Illuminate\Support\Facades\Auth;

class ExportController extends Controller
{
    public $data;

    public function __construct()
    {
        $this->data['page_title'] = 'export';
        $this->data['menu'] = 'export';
    }

    public function exportLots($id = null)
    {
        $community = Communities::whereId($id)->first();
        if($community):
            $plot = Plots::where('community_id', $id)->first();
            $memoryToUse = 50*1024*1024*1024*1024;
            $output = fopen('php://temp/maxmemory:'.$memoryToUse, 'r+');
            $columns = array('', 'Community', '-', $community->name);
            fputcsv($output, $columns);
            $columns = array('Lot No', 'Price ($)', 'Status');
            fputcsv($output, $columns);

            $data = Lots::select('lots.*', 'legends.name')
                        ->join('legends', 'legends.id', '=', 'lots.legend_id')
                        ->where('lots.plot_id', $plot->id)
                        ->orderBy('lots.alias', 'asc')
                        ->get();
            foreach($data as $key => $index)
            {
            fputcsv($output, array($index->alias, number_format($index->price), $index->name ));
            }
            rewind($output);
            header('Content-type: application/octet-stream');
            header('Content-Disposition: attachment; filename="Lots-Report.csv"');
            echo stream_get_contents($output);
            fclose($output);
            die;
        else:
            echo 'Invalid path'; die;
        endif;
    }

    public function leadsReport()
    {
        $leads = Admins::whereAdminRoleId(2)->get();
        $memoryToUse = 50*1024*1024*1024*1024;
        $output = fopen('php://temp/maxmemory:'.$memoryToUse, 'r+');
        $columns = array('SNo', 'Name', 'Email', 'Contact No', 'Joined On');
        fputcsv($output, $columns);

        foreach($leads as $key => $index)
        {
            fputcsv($output, array($key+1, ucwords($index->name), $index->email, $index->mobile, date('M-d-Y', strtotime($index->created_at)) ));
        }
        rewind($output);
        header('Content-type: application/octet-stream');
        header('Content-Disposition: attachment; filename="leads-Report.csv"');
        echo stream_get_contents($output);
        fclose($output);
        die;
    }

    public function EstimatesReport(Request $request)
    {
        $memoryToUse = 50*1024*1024*1024*1024;
        $output = fopen('php://temp/maxmemory:'.$memoryToUse, 'r+');
        $columns = array('SNo', 'Buyer', 'Email', 'Contact No', 'Community','Home','Color Scheme','Total Price','Generated By');
        fputcsv($output, $columns);
        
        if($request->estimate_ids):
            $estimate_ids = explode(',',$request->estimate_ids);
              foreach($estimate_ids as $key => $index)
            {
                
                $estimates =  Estimates::where('id',$index)->with(['communities', 'admins', 'homes', 'color_schemes'])->first();  
                $name           = isset($estimates->admins->name)?ucwords($estimates->admins->name):'';
                $email          = isset($estimates->admins->email)?$estimates->admins->email:'';
                $contact        = isset($estimates->admins->mobile)?$estimates->admins->mobile:'';
                $comm           = isset($estimates->communities->name)?$estimates->communities->name:'';
                $home           = isset($estimates->homes->title)?$estimates->homes->title:'';
                $color          = isset($estimates->color_schemes->title)?$estimates->color_schemes->title:'';
                $total          = isset($estimates->total_price)?$estimates->total_price:'';
                $generated_by   = isset($estimates->references->name)?$estimates->references->name:'';
                fputcsv($output, array($key+1,$name,$email,$contact,$comm,$home,$color,$total,$generated_by));
            }
        else:
         $estimates =  Estimates::with(['communities', 'admins', 'homes', 'color_schemes'])->get();
             foreach($estimates as $key => $index)
            {
                $name       = isset($index->admins->name)?ucwords($index->admins->name):'';
                $email      = isset($index->admins->email)?$index->admins->email:'';
                $contact    = isset($index->admins->mobile)?$index->admins->mobile:'';
                $comm       = isset($index->communities->name)?$index->communities->name:'';
                $home       = isset($index->homes->title)?$index->homes->title:'';
                $color      = isset($index->color_schemes->title)?$index->color_schemes->title:'';
                $total      = isset($index->total_price)?$index->total_price:'';
                $generated_by   = isset($index->references->name)?$index->references->name:'';
                fputcsv($output, array($key+1,$name,$email,$contact,$comm,$home,$color,$total,$generated_by));
            }
        endif;    
        rewind($output);
        header('Content-type: application/octet-stream');
        header('Content-Disposition: attachment; filename="estimates-Report.csv"');
        echo stream_get_contents($output);
        fclose($output);
        die;
    }
    public function EstimatesSingleReport($id)
    {
            $this->data['estimates'] = Estimates::where('id',$id)->with(['communities', 'admins', 'homes', 'color_schemes'])->get()->first();
            if($this->data['estimates']->home_feature_ids!=null)
            {
            $ids = explode(',',$this->data['estimates']->home_feature_ids);
            $f_array = [];
            foreach($ids as $f)
            {
                $d = HomeFeatures::where('id',$f)->get();
               array_push($f_array,$d); 
            }
            $this->data['home_upgrade_patches'] = $f_array;
             }
             else
             {
                 $this->data['home_upgrade_patches'] = null;
             }
            if(Auth::user()->admin_role_id==4)
             {
                return view('admin-manager.admin-estimate')->with($this->data);   
             }
            return view('admin.admin-estimate')->with($this->data);
    
    }
    
       public function EstimatesSingleUserReport($id)
    {
            $this->data['estimates'] = Estimates::where('id',$id)->with(['communities','lots', 'admins', 'homes', 'color_schemes'])->get()->first();
            $this->data['svg'] = Plots::where('id',$this->data['estimates']->lots->plot_id)->get()->first();
            if($this->data['estimates']->home_feature_ids!=null)
            {
                $ids = explode(',',$this->data['estimates']->home_feature_ids);
                $f_array = [];
                foreach($ids as $f)
                {
                    $d = HomeFeatures::where('id',$f)->get();
                array_push($f_array,$d); 
                }
                $this->data['home_upgrade_patches'] = $f_array;
             }
             else
             {
                 $this->data['home_upgrade_patches'] = null;
             }
            //  dd($this->data['estimates']->homes->floors);
            return view('user.user-estimate')->with($this->data);
    
    }
    
    public function EstimatesSinglePdfReport($id)
    {
        $this->data['estimates'] = Estimates::where('id',$id)->with(['communities', 'admins', 'homes', 'color_schemes'])->get()->first();
         if($this->data['estimates']->home_feature_ids!=null)
            {
            $ids = explode(',',$this->data['estimates']->home_feature_ids);
            $f_array = [];
            foreach($ids as $f)
            {
                $d = HomeFeatures::where('id',$f)->get();
               array_push($f_array,$d); 
            }
            $this->data['home_upgrade_patches'] = $f_array;
             }
             else
             {
                 $this->data['home_upgrade_patches'] = null;
             }
            //  return $this->data['estimates']->communities->slug;
            $name = 'Estimate_'.ucwords($this->data['estimates']->admins->name).'_'.ucwords($this->data['estimates']->communities->slug).'_'.str_replace(' ', '-', ucwords($this->data['estimates']->homes->title));

            ini_set('memory_limit', '-1');
            ini_set('max_execution_time', 300); //300 seconds = 5 minutes
            $pdf = \PDF::loadView('admin-pdf',$this->data)->setPaper('a4', 'portrait');
            return $pdf->download($name.'.pdf');
    }
    
      public function EstimatesSingleUserPdfReport($id)
    {
        $this->data['estimates'] = Estimates::where('id',$id)->with(['communities', 'homes', 'color_schemes'])->get()->first();
         if($this->data['estimates']->home_feature_ids!=null)
            {
            $ids = explode(',',$this->data['estimates']->home_feature_ids);
            $f_array = [];
            foreach($ids as $f)
            {
                $d = HomeFeatures::where('id',$f)->get();
               array_push($f_array,$d); 
            }
            $this->data['home_upgrade_patches'] = $f_array;
             }
             else
             {
                 $this->data['home_upgrade_patches'] = null;
             }
            //  return $this->data;
            $name = 'Estimate_'.ucwords($this->data['estimates']->communities->slug).'_'.str_replace(' ', '-', ucwords($this->data['estimates']->homes->title));

            ini_set('memory_limit', '-1');
            ini_set('max_execution_time', 300); //300 seconds = 5 minutes
            $pdf = \PDF::loadView('user.user-pdf',$this->data)->setPaper('a4', 'portrait');
            return $pdf->download($name.'.pdf');
    }


}
